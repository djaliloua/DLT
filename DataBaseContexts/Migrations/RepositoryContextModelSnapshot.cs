// <auto-generated />
using System;
using DataBaseContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataBaseContexts.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("Models.Account.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Day")
                        .HasColumnType("TEXT");

                    b.Property<double>("Money")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Models.Market.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPurchased")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Item_Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Item_Name")
                        .HasColumnType("TEXT");

                    b.Property<double>("Item_Price")
                        .HasColumnType("REAL");

                    b.Property<double>("Item_Quantity")
                        .HasColumnType("REAL");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Models.Market.ProductLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Accuracy")
                        .HasColumnType("REAL");

                    b.Property<double?>("Altitude")
                        .HasColumnType("REAL");

                    b.Property<int>("AltitudeReferenceSystem")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Course")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsFromMockProvider")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ReducedAccuracy")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Speed")
                        .HasColumnType("REAL");

                    b.Property<double?>("VerticalAccuracy")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProductLocations");
                });

            modelBuilder.Entity("Models.Market.ProductStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PurchaseCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalQuantity")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseId")
                        .IsUnique();

                    b.ToTable("ProductStatistics");
                });

            modelBuilder.Entity("Models.Market.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PurchaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("Models.Market.Product", b =>
                {
                    b.HasOne("Models.Market.Purchase", "Purchase")
                        .WithMany("Products")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("Models.Market.ProductLocation", b =>
                {
                    b.HasOne("Models.Market.Product", "Product")
                        .WithOne("ProductLocation")
                        .HasForeignKey("Models.Market.ProductLocation", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Models.Market.ProductStatistics", b =>
                {
                    b.HasOne("Models.Market.Purchase", "Purchase")
                        .WithOne("ProductStatistics")
                        .HasForeignKey("Models.Market.ProductStatistics", "PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("Models.Market.Product", b =>
                {
                    b.Navigation("ProductLocation");
                });

            modelBuilder.Entity("Models.Market.Purchase", b =>
                {
                    b.Navigation("ProductStatistics");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
